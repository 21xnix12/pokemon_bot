import discord
from discord.ext import commands
import random
import requests
import asyncio


intents = discord.Intents.default()
intents.message_content = True
bot = commands.Bot(command_prefix="!", intents=discord.Intents.all())

current_guess = None
guess_active = False

def get_random_pokemon():
    pokemon_id = random.randint(1, 1010)
    url = f"https://pokeapi.co/api/v2/pokemon/{pokemon_id}"
    response = requests.get(url)
    data = response.json()

    name = data['name']
    image_url = data['sprites']['other']['official-artwork']['front_default']

    return name, image_url

@bot.command()
async def guesspoke(ctx):
    global current_guess, guess_active
    if guess_active:
        await ctx.send("‚ùó Aktualnie trwa ju≈º zgadywanka! Poczekaj a≈º siƒô sko≈Ñczy.")
        return

    name, image_url = get_random_pokemon()
    current_guess = name.lower()
    guess_active = True

    await ctx.send("Zgadnij tego Pok√©mona!")
    await ctx.send(image_url)

    # Odczekaj 30 sekund na zgadywanie
    await asyncio.sleep(30)

    if guess_active:
        await ctx.send(f"‚ùå Nikt nie zgad≈Ç! To by≈Ç **{current_guess.capitalize()}**.")
        current_guess = None
        guess_active = False

@bot.event
async def on_message(message):
    global current_guess, guess_active
    await bot.process_commands(message)

    if guess_active and current_guess and not message.author.bot:
        if message.content.lower() == current_guess:
            await message.channel.send(f"üéâ Brawo {message.author.mention}! To by≈Ç **{current_guess.capitalize()}**!")
            current_guess = None
            guess_active = False

# Fakty o generacjach Pok√©mon√≥w
generation_facts = {
    1: "Generacja 1 (Red/Blue) wprowadzi≈Ça pierwszy Pok√©dex i 151 Pok√©mon√≥w. Po raz pierwszy wprowadzono walki Pok√©mon√≥w i trening.",
    2: "Generacja 2 (Gold/Silver) doda≈Ça system dnia i nocy oraz nowe typy: stalowy i ciemny. Wprowadzono tak≈ºe 100 nowych Pok√©mon√≥w.",
    3: "Generacja 3 (Ruby/Sapphire) wprowadzi≈Ça nowe regiony i zaczƒô≈Ça u≈ºywaƒá GBA. Dodano 135 nowych Pok√©mon√≥w.",
    4: "Generacja 4 (Diamond/Pearl) doda≈Ça mechanikƒô ewolucji z u≈ºyciem kamieni i nowe formy region√≥w. Dodano 107 nowych Pok√©mon√≥w.",
    5: "Generacja 5 (Black/White) doda≈Ça najwiƒôcej Pok√©mon√≥w z ka≈ºdej generacji, a≈º 156 nowych! Doda≈Ça r√≥wnie≈º mechanikƒô 3D w walce.",
    6: "Generacja 6 (X/Y) wprowadzi≈Ça typ wr√≥≈ºki i 3D w grafice. Dodano 72 nowe Pok√©mony.",
    7: "Generacja 7 (Sun/Moon) zrewolucjonizowa≈Ça system Z-moves, a tak≈ºe zmieni≈Ça strukturƒô gier, eliminujƒÖc tradycyjne sale. Dodano 88 Pok√©mon√≥w.",
    8: "Generacja 8 (Sword/Shield) wprowadzi≈Ça Dynamaxing i gigantyczne formy Pok√©mon√≥w. Dodano 96 nowych Pok√©mon√≥w.",
    9: "Generacja 9 (Scarlet/Violet) wprowadzi≈Ça otwarty ≈õwiat oraz nowe formy i mechaniki, takie jak Terastal. Dodano 103 nowe Pok√©mony."
}

# Funkcja do pobierania danych o Pok√©mona z konkretnej generacji
def get_random_pokemon_from_generation(gen):
    url = f"https://pokeapi.co/api/v2/generation/{gen}/"
    response = requests.get(url)
    data = response.json()

    pokemon = random.choice(data['pokemon_species'])
    pokemon_name = pokemon['name']

    pokemon_url = f"https://pokeapi.co/api/v2/pokemon-species/{pokemon_name}/"
    response = requests.get(pokemon_url)
    data = response.json()

    description = None
    for entry in data['flavor_text_entries']:
        if entry['language']['name'] == 'en':  # angielski opis
            description = entry['flavor_text']
            break

    pokemon_id = data['id']
    image_url = f"https://assets.pokemon.com/assets/cms2/img/pokedex/full/{str(pokemon_id).zfill(3)}.png"

    return pokemon_name, description, image_url

@bot.command()
async def rapoke(ctx):
    generation = random.randint(1, 9)
    pokemon_name, description, image_url = get_random_pokemon_from_generation(generation)

    # Pobierz dane o pokemonie z PokeAPI dla statystyk
    response = requests.get(f"https://pokeapi.co/api/v2/pokemon/{pokemon_name}")
    if response.status_code != 200:
        await ctx.send("‚ùó Nie uda≈Ço siƒô pobraƒá pe≈Çnych danych o Pok√©monie.")
        return

    data = response.json()

    stats = "\n".join([f"**{s['stat']['name'].capitalize()}**: {s['base_stat']}" for s in data['stats']])

    embed = discord.Embed(
        title=f"Pok√©mon z generacji {generation}: {pokemon_name.capitalize()} (ID: {data['id']})",
        description=description,
        color=discord.Color.random()
    )
    embed.set_image(url=image_url)
    embed.add_field(name="Statystyki", value=stats, inline=False)

    generation_fact = generation_facts[generation]
    embed.add_field(name="Ciekawostka o tej generacji:", value=generation_fact, inline=False)

    await ctx.send(embed=embed)

# Komenda do wy≈õwietlania fakt√≥w o generacjach
@bot.command()
async def pokefact(ctx, generation: int):
    if 1 <= generation <= 9:
        fact = generation_facts[generation]
        await ctx.send(f"Ciekawostka o generacji {generation}: {fact}")
    else:
        await ctx.send("Podaj liczbƒô od 1 do 9, aby uzyskaƒá fakt o generacji.")

# Komenda do pomocy (help)
@bot.command()
async def pomoc(ctx):
    help_message = """
    **üìñ Komendy dostƒôpne na serwerze:**

    üìå **!rapoke**  
    ‚ûù Losuje Pok√©mona z losowej generacji, wysy≈Ça jego obrazek, opis z Pok√©dexa, statystyki i ciekawostkƒô o tej generacji.

    üìå **!pokefact [numer generacji]**  
    ‚ûù Wy≈õwietla ciekawostkƒô o podanej generacji Pok√©mon√≥w (od 1 do 9).  
    *Przyk≈Çad:* `!pokefact 5`

    üìå **!guesspoke**  
    ‚ûù Bot wysy≈Ça obrazek losowego Pok√©mona (bez nazwy). U≈ºytkownicy majƒÖ 30 sekund na zgadniƒôcie. Je≈õli kto≈õ odgadnie ‚Äî bot gratuluje. Je≈õli nie ‚Äî po 30 sekundach podaje prawid≈ÇowƒÖ nazwƒô.

    üìå **!pomoc**  
    ‚ûù Wy≈õwietla ten komunikat.
    """

    await ctx.send(help_message)


bot.run('token')
